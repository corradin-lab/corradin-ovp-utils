# AUTOGENERATED BY NBDEV! DO NOT EDIT!

__all__ = ["index", "modules", "custom_doc_links", "git_url"]

index = {"GenFileFormat": "01_datasets_gen_file_format.ipynb",
         "create_file_object_class": "01_datasets_gen_file_format.ipynb",
         "OVPDataSetError": "02_datasets_OVPDataset.ipynb",
         "parse_class": "02_datasets_OVPDataset.ipynb",
         "OVPDataset": "02_datasets_OVPDataset.ipynb",
         "SampleFileFormat": "03_datasets_sample_file.ipynb",
         "RsidComboInfo": "04_odds_ratio.ipynb",
         "get_geno_combination_df": "04_odds_ratio.ipynb",
         "CaseControlOddsRatio": "04_odds_ratio.ipynb",
         "odds_ratio_calculator": "04_odds_ratio.ipynb",
         "odds_ratio_df_single_combined": "04_odds_ratio.ipynb",
         "reconstruct_genetic_info": "04_odds_ratio.ipynb",
         "CombinedGenoPheno": "05_datasets_CombinedGenoPheno.ipynb",
         "MissingAttributeError": "06_utils.ipynb",
         "requires": "06_utils.ipynb",
         "cd": "catalog.ipynb",
         "pd.options.mode.chained_assignment": "07_permutations.ipynb",
         "PermuteOddsRatio": "07_permutations.ipynb",
         "MtcTable": "08_MTC.ipynb",
         "StepwiseFilter": "08_MTC.ipynb",
         "PIPE_TYPE": "08_MTC.ipynb",
         "MTCFilterResult": "08_MTC.ipynb",
         "change_cwd_dir": "catalog.ipynb",
         "get_config": "catalog.ipynb",
         "get_catalog": "catalog.ipynb",
         "reload_catalog": "catalog.ipynb",
         "reload": "catalog.ipynb",
         "package_outer_folder": "catalog.ipynb",
         "catalog_folder": "catalog.ipynb",
         "test_patterns": "catalog.ipynb",
         "conf_test_data_catalog": "catalog.ipynb",
         "test_data_catalog": "catalog.ipynb",
         "log": "cli.ipynb",
         "get_full_path_str": "cli.ipynb",
         "rmtree": "cli.ipynb",
         "shell_task": "cli.ipynb",
         "run_ovp_pipeline": "cli.ipynb",
         "run_ovp_pipeline_static": "cli.ipynb",
         "index_search": "datasets_bgen_file_format.ipynb",
         "BgenFileObject": "datasets_bgen_file_format.ipynb",
         "BgenFileFormat": "datasets_bgen_file_format.ipynb",
         "GeneticFileFormat": "datasets_genetic_file.ipynb",
         "GeneticFileFormatInterfaceAPI": "datasets_genetic_file.ipynb",
         "row_vectorize": "datasets_genetic_file.ipynb",
         "triplicate_converter": "datasets_genetic_file.ipynb",
         "get_possible_geno_combinations": "datasets_genetic_file.ipynb",
         "get_geno_one_snp": "datasets_genetic_file.ipynb",
         "SingleFilePathSchema": "datasets_schemas.ipynb",
         "MultipleFilePathSchema": "datasets_schemas.ipynb",
         "CaseControlFilePathSchema": "datasets_schemas.ipynb",
         "process_pairs_file_name": "prefect_OVP_pipeline.ipynb",
         "create_flow_run_name": "prefect_OVP_pipeline.ipynb",
         "context.config.flows.checkpointing": "prefect_step1_flow.ipynb",
         "read_parquet_single_pair_cache_df": "prefect_permutation_flow.ipynb",
         "load_file": "prefect_permutation_flow.ipynb",
         "get_pairs_for_step2": "prefect_permutation_flow.ipynb",
         "calculate_num_batches": "prefect_permutation_flow.ipynb",
         "get_permute_odds_ratio_object": "prefect_permutation_flow.ipynb",
         "get_duplicated_pair_info": "prefect_permutation_flow.ipynb",
         "perform_permutation": "prefect_permutation_flow.ipynb",
         "resolve_iteration_result_step_file_name": "prefect_permutation_flow.ipynb",
         "get_previous_steps_result": "prefect_permutation_flow.ipynb",
         "process_report_df": "prefect_permutation_flow.ipynb",
         "determine_if_needs_more_perm": "prefect_permutation_flow.ipynb",
         "resolve_output_folder_path": "prefect_permutation_flow.ipynb",
         "parquet_result": "prefect_permutation_flow.ipynb",
         "tsv_result_partial": "prefect_step1_flow.ipynb",
         "mtc_file_name": "prefect_permutation_flow.ipynb",
         "iteration_result_step_file_template": "prefect_permutation_flow.ipynb",
         "file_path_template": "prefect_permutation_flow.ipynb",
         "flow_run_name_template": "prefect_permutation_flow.ipynb",
         "template_summary_df_target_task": "prefect_permutation_flow.ipynb",
         "dynamic_executor": "prefect_permutation_flow.ipynb",
         "dask_executor": "prefect_permutation_flow.ipynb",
         "SNPPairInfo": "prefect_step1_flow.ipynb",
         "format_result_dir": "prefect_step1_flow.ipynb",
         "get_datasets": "prefect_step1_flow.ipynb",
         "get_config_task": "prefect_step1_flow.ipynb",
         "process_pairs_file": "prefect_step1_flow.ipynb",
         "get_snps_info": "prefect_step1_flow.ipynb",
         "output_search_result_df": "prefect_step1_flow.ipynb",
         "load_extracted_info": "prefect_step1_flow.ipynb",
         "pairs_df_to_records": "prefect_step1_flow.ipynb",
         "template_summary_df_target": "prefect_step1_flow.ipynb",
         "get_sample_subset_id_dict": "prefect_step1_flow.ipynb",
         "output_case_control_single_pair_data_cache_df": "prefect_step1_flow.ipynb",
         "output_parquet_case_control_single_pair_data_cache_df": "prefect_step1_flow.ipynb",
         "test": "prefect_step1_flow.ipynb",
         "parquet_result_partial": "prefect_step1_flow.ipynb",
         "ID_COL_LIST": "prefect_step1_flow.ipynb",
         "ALL_GENO_DF_FILE_NAME": "prefect_step1_flow.ipynb",
         "ALL_SAMPLES_GENO_DF_FILE_NAME": "prefect_step1_flow.ipynb",
         "SUBSET_ALL_SAMPLES_GENO_DF_FILE_NAME": "prefect_step1_flow.ipynb",
         "SAMPLE_SUBSETS": "prefect_step1_flow.ipynb",
         "SEARCH_RESULT_DF_FILE_NAME": "prefect_step1_flow.ipynb",
         "UNFILTERED_SUMMARY_DF_FILE_NAME": "prefect_step1_flow.ipynb",
         "STEP1_FINAL_REPORT_FILE_NAME": "prefect_step1_flow.ipynb",
         "SINGLE_PAIR_DATA_CACHE_TEMPLATE_WITHOUT_EXTENSION": "prefect_step1_flow.ipynb",
         "task_no_checkpoint": "prefect_step1_flow.ipynb",
         "get_extracted_geno_files_names": "prefect_step1_flow.ipynb",
         "check_file_exists": "prefect_step1_flow.ipynb",
         "check_files_exist": "prefect_step1_flow.ipynb",
         "output_df_from_pydantic_obj": "prefect_step1_flow.ipynb",
         "generate_summary_df": "prefect_step1_flow.ipynb",
         "output_all_pairs_summary_df": "prefect_step1_flow.ipynb",
         "perform_MTC_filters": "prefect_step1_flow.ipynb",
         "output_step_1_final_report": "prefect_step1_flow.ipynb",
         "get_GWAS_id_for_step2": "prefect_step1_flow.ipynb",
         "dummy_task": "prefect_step1_flow.ipynb",
         "step2_flow_template": "prefect_step1_flow.ipynb",
         "DEFAULT_CONFIG_PATH": "prefect_step1_flow.ipynb"}

modules = ["datasets/genetic_file/Gen.py",
           "datasets/OVPDataset.py",
           "datasets/sample_file.py",
           "odds_ratio.py",
           "datasets/CombinedGenoPheno.py",
           "datasets/utils.py",
           "permutations.py",
           "MTC.py",
           "catalog.py",
           "cli.py",
           "datasets/genetic_file/Bgen.py",
           "datasets/genetic_file/__init__.py",
           "datasets/schemas.py",
           "prefect_flows/full_pipeline.py",
           "prefect_flows/step2.py",
           "prefect_flows/step1.py"]

doc_url = "https://corradin-lab.github.io/corradin_ovp_utils/"

git_url = "https://github.com/corradin-lab/corradin_ovp_utils/tree/master/"

def custom_doc_links(name): return None
