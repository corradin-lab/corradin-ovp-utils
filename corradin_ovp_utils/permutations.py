# AUTOGENERATED! DO NOT EDIT! File to edit: 07_permutations.ipynb (unless otherwise specified).

__all__ = ['PermuteOddsRatio']

# Cell
import pandas as pd
import numpy as np
from typing import Any, Dict, List, Optional, Literal, Union
from .odds_ratio import reconstruct_genetic_info, odds_ratio_df_single_combined, CaseControlOddsRatio, get_geno_combination_df
from fastcore.basics import basic_repr, store_attr
from copy import deepcopy
from tqdm.auto import tqdm
pd.options.mode.chained_assignment = None

# from dataclasses import dataclass
# from pydantic import BaseModel
# from itertools import product
# from ast import literal_eval

# Cell
class PermuteOddsRatio():
    def __init__(self,*, summary_df, single_rsid:str, all_geno_df, combo_rsid_list: List[str], permute_rsid:str, mtc_pval_thresh=None):
        store_attr()
        self.geno_each_sample_dict = reconstruct_genetic_info(self.summary_df, rsid_list = self.combo_rsid_list)
        self.permuted_geno_each_sample_dict = deepcopy(self.geno_each_sample_dict)
        self.perm_record = []
        self.reset()

    @property
    def permuted_odds_ratio_df(self):
        geno_each_sample_dict = self.permuted_geno_each_sample_dict
        permute_rsid = self.permute_rsid
        single_rsid = self.single_rsid
        combo_rsid_list = self.combo_rsid_list
        all_geno_df = self.all_geno_df

        #the randomization has to be done across cases and controls
        all_permute_genos = np.append(geno_each_sample_dict["case_geno_each_sample"][permute_rsid].values, geno_each_sample_dict["control_geno_each_sample"][permute_rsid].values)
        all_permute_genos = np.random.permutation(all_permute_genos)

        geno_each_sample_dict["case_geno_each_sample"][permute_rsid] = all_permute_genos[:geno_each_sample_dict["case_geno_each_sample"].shape[0]]
        geno_each_sample_dict["control_geno_each_sample"][permute_rsid] = all_permute_genos[geno_each_sample_dict["case_geno_each_sample"].shape[0]:]

        #refactor this into a function in `odds_ratio` module and use it here
        case_df = get_geno_combination_df(geno_each_sample_dict["case_geno_each_sample"], rsid_list=combo_rsid_list)
        control_df = get_geno_combination_df(geno_each_sample_dict["control_geno_each_sample"], rsid_list=combo_rsid_list)

        #TODO: turn all of this print into logging with Rich library (search for `print`)
        # display(all_permute_genos)
        # display(geno_each_sample_dict)
        # print("case_df")
        # display(case_df.df)
        # print("control_df")
        # display(control_df.df)

        #for testing
        permuted_case_control_odds_ratio_obj = CaseControlOddsRatio(case= case_df,
                    control = control_df,
                     geno_df = all_geno_df.loc[combo_rsid_list])
        odds_ratio_df_permuted = permuted_case_control_odds_ratio_obj.odds_ratios_df
        return odds_ratio_df_permuted

    @property
    def odds_ratio_compare_df(self):
        return self._odds_ratio_compare_df

    @property
    def report_df(self):
        df = self._odds_ratio_compare_df.copy(deep=True)
        df["combo_higher_than_single_binary"] = (self.summary_df["odds_ratio_combo"] > self.summary_df["odds_ratio_single"]).astype(int)
        df["combo_higher_than_single_str"] = df["combo_higher_than_single_binary"].replace({1: "higher", 0: "lower"})
        df["iter_used_for_pval"] = np.where(df["combo_higher_than_single_binary"], df["num_perm_higher"], df["num_perm_lower"])
        df["pval"] = df["iter_used_for_pval"].astype(float)/df["iterations"]
        df["pval"] = np.where(df["pval"] != 0, df["pval"].astype(float), 1/df["iterations"].astype(float))

        return df

    def reset(self):
        self._odds_ratio_compare_df = self.summary_df[self.combo_rsid_list + ["odds_ratio_single", "odds_ratio_combo"]].copy(deep=True)
        self._odds_ratio_compare_df.loc[:,["iterations", "num_perm_lower", "num_perm_higher", "num_perm_equal"]] = 0
        self.perm_record = []
        if self.mtc_pval_thresh:
            self._odds_ratio_compare_df["mtc_pval_thresh"] = self.mtc_pval_thresh


    def perform_permutation(self,*, n_iterations, record_perm=False):
        for iteration in tqdm(range(n_iterations)):
            #print(iteration)
            odds_ratio_df_permuted = self.permuted_odds_ratio_df
            # if isinstance(odds_ratio_df_permuted, CaseControlOddsRatio):
            #     return odds_ratio_df_permuted
            self.odds_ratio_compare_df["num_perm_lower"] += (odds_ratio_df_permuted["odds_ratio"] < self.summary_df["odds_ratio_combo"]).astype(int)
            self.odds_ratio_compare_df["num_perm_higher"] += (self.summary_df["odds_ratio_combo"] < odds_ratio_df_permuted["odds_ratio"]).astype(int)
            self.odds_ratio_compare_df["num_perm_equal"] += (self.summary_df["odds_ratio_combo"] == odds_ratio_df_permuted["odds_ratio"]).astype(int)
            self.odds_ratio_compare_df["iterations"] += 1

            if record_perm:
                self.perm_record.append(odds_ratio_df_permuted["odds_ratio"])

        return self.odds_ratio_compare_df

