# AUTOGENERATED! DO NOT EDIT! File to edit: prefect_OVP_pipeline.ipynb (unless otherwise specified).

__all__ = ['process_pairs_file_name', 'create_flow_run_name']

# Cell
from prefect import Flow, Parameter, task
from prefect.tasks.prefect import create_flow_run, wait_for_flow_run, RenameFlowRun
from prefect.engine.results import LocalResult
from .step1 import get_config_task
from .step1 import dev_flow as step1_flow
from prefect.tasks.templates import StringFormatter
from pathlib import Path
from hydra import initialize, initialize_config_module, initialize_config_dir, compose
from omegaconf import OmegaConf, dictconfig


# Cell
@task
def process_pairs_file_name(pairs_file):
    return Path("/lab/corradin_biobank/FOR_AN/OVP/corradin_ovp_utils/test_MS_chr22.tsv").stem
create_flow_run_name = StringFormatter(template = "{exp}_{pairs_file}_{today}")

# Cell

with Flow("OVP_pipeline", result=LocalResult("./test_prefect_whole_pipeline")) as pipeline:
    config_path = Parameter("config_path", default = "/lab/corradin_biobank/FOR_AN/OVP/corradin_ovp_utils/conf/hydra_conf/")
    overrides = Parameter("overrides", default = ["exp=test_exp", "dataset=test_MS"])
    pairs_file = Parameter("pairs_file", default = "/lab/corradin_biobank/FOR_AN/OVP/corradin_ovp_utils/test_MS_chr22.tsv")

    cfg = get_config_task(config_path=config_path, overrides = overrides, pairs_file = pairs_file)

    pairs_file_processed = process_pairs_file_name(pairs_file)
    flow_run_name = create_flow_run_name(exp = cfg["exp"], pairs_file = pairs_file_processed)

    wait_for_flow_run(create_flow_run(parameters={"config_path": config_path, "overrides": overrides, "pairs_file": pairs_file},
                                      flow_name= "OVP_step1",
                                     project_name= "ovp_prod", run_name= flow_run_name))


pipeline.visualize()